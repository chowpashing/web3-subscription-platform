"""
Django settings for backend_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Configure the logger
logger = logging.getLogger(__name__)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9%%dd_ki+*rq6!d8fwwzethc1n&f#1nqtl6v2h9hnpiy9uxd6y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    # 'bots', # Commenting out as it seems to be a typo or unused
    'subscription', # 添加 subscription 应用
    'user',
    'rest_framework_simplejwt.token_blacklist',
    'botmanagement',  # 添加这一行
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',  # 添加CORS中间件，必须在CommonMiddleware之前
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS设置
CORS_ALLOW_ALL_ORIGINS = True  # 在开发环境中允许所有源
# 生产环境中应该设置具体的白名单
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",
#     "http://localhost:5174",
# ]
CORS_ALLOW_CREDENTIALS = True

# REST Framework设置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

# Simple JWT 设置
SIMPLE_JWT = {
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# 添加自定义认证后端
AUTHENTICATION_BACKENDS = [
    'user.auth.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = 'backend_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Web3 设置
WEB3_SETTINGS = {
    'INFURA_PROJECT_ID': '161ab53b248d4a039e6e6d31908a988b',  # 硬编码的 Infura Project ID
    'NETWORK': 'sepolia',  # use Sepolia test net
    'CHAIN_ID': 11155111,  # Sepolia's ID
    'NETWORK_NAME': 'Sepolia Test Network'  # Blockchain ID
}

# IPFS 设置
IPFS_NODE_URL = 'http://localhost:5001'  # IPFS节点地址
IPFS_GATEWAY_URL = 'https://ipfs.io'  # IPFS网关地址

# Web3 配置
WEB3_PROVIDER_URL = 'https://sepolia.infura.io/v3/161ab53b248d4a039e6e6d31908a988b'  # 硬编码的 Web3 提供者 URL
BOT_REGISTRY_CONTRACT_ADDRESS = '0xff2760ac2b543afB53Eb8C11e1ee326484E76B5E'
BOT_SUBSCRIPTION_CONTRACT_ADDRESS = '0x0Eee6D0c0fb9B8D99e3551B6a7fE0A42Cfa537e1'
BOT_PAYMENT_CONTRACT_ADDRESS = '0x521b611EBf9e2f35c5cD82C344245eC6dDA731Fc'
USDT_CONTRACT_ADDRESS = '0x79C1433c99E6D3CBD8fcdD6957315b8Ed198aDcf'

# 确保设置了 Web3 提供者
if not WEB3_PROVIDER_URL or WEB3_PROVIDER_URL == 'https://sepolia.infura.io/v3/your-infura-key':
    logger.warning("未设置 Web3 提供者 URL，区块链功能将不可用")

# 配置日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Pinata API 配置
PINATA_API_KEY = os.getenv('PINATA_API_KEY', '')
PINATA_SECRET_KEY = os.getenv('PINATA_SECRET_KEY', '')
PINATA_JWT = os.getenv('PINATA_JWT', '')

# 确保设置了 Pinata API 凭证
if not PINATA_JWT:
    logger.warning("未设置 Pinata JWT，IPFS 上传功能将不可用")
else:
    logger.info("Pinata JWT 已成功加载")

# SIWE 配置
ALLOWED_DOMAINS = ['localhost', '127.0.0.1', 'localhost:5173', '127.0.0.1:5173']  # 开发环境域名
ALLOWED_CHAIN_ID = 11155111  # Sepolia 测试网
MESSAGE_EXPIRATION = 3600  # 1小时
